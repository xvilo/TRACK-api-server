<?php

/**
 * AdministrationController
 * PHP version 5
 *
 * @category Class
 * @package  Xvilo\Track\ApiServer\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * TRACK API Specification
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace Xvilo\Track\ApiServer\Controller;

use \Exception;
use JMS\Serializer\Exception\RuntimeException as SerializerRuntimeException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use Xvilo\Track\ApiServer\Api\AdministrationApiInterface;
use Xvilo\Track\ApiServer\Model\Error;
use Xvilo\Track\ApiServer\Model\WeekTotals;

/**
 * AdministrationController Class Doc Comment
 *
 * @category Class
 * @package  Xvilo\Track\ApiServer\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class AdministrationController extends Controller
{

    /**
     * Operation listTotalsForYearAndWeek
     *
     * List all timers
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function listTotalsForYearAndWeekAction(Request $request, $year, $week)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $year = $this->deserialize($year, 'string', 'string');
            $week = $this->deserialize($week, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($year, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($week, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            
            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->listTotalsForYearAndWeek($year, $week, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'The totals for a given year + week';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'The totals for a given year + week';
                    break;
                case 0:
                    $message = 'unexpected error';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return AdministrationApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('administration');
    }
}
